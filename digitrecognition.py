# -*- coding: utf-8 -*-
"""Untit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vWIwdM5I-fYplOzZkpw58j1FRx-LF06j
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import matplotlib.image as img
import numpy as np

(X_train, Y_TRAIN),(X_TEST, Y_TEST)= tf.keras.datasets.mnist.load_data()
X_train.shape
# Reshape and normalize the data for CNN
X_train_f=X_train.reshape(len(X_train),28,28,1)/255
X_TEST_f=X_TEST.reshape(len(X_TEST),28,28,1)/255
X_TEST.shape

# Pass a list of layers to the Sequential constructor
model=keras.Sequential([
    keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Conv2D(32, (3,3), activation='relu'), # No need to specify input_shape again
    keras.layers.MaxPooling2D((2,2)),
    keras.layers.Flatten(), # Add a Flatten layer to connect Conv2D and Dense
    keras.layers.Dense(10, activation='sigmoid' ),
])
model.compile(
    optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']
)
model.fit(X_train_f, Y_TRAIN, epochs=5)
model.evaluate(X_TEST_f, Y_TEST)
plt.matshow(X_TEST[1])
predict=model.predict(X_TEST_f)
predict[1]
np.argmax(predict[1])